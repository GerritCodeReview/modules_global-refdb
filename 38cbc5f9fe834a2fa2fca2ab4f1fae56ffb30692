{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c670ba5e_5b095a3b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 18,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-18T11:37:09Z",
      "side": 1,
      "message": "I don\u0027t believe we need this complexity: if a ref is included then it is REQUIRED, if excluded, then it is IGNORED.\n\nAs we are on master, we should remove them and document the behaviour.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 18,
        "endChar": 0
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "688c110e_cec42b33",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 18,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-06-27T09:00:36Z",
      "side": 1,
      "message": "Done - all behavior moved into enforcementRules alone",
      "parentUuid": "c670ba5e_5b095a3b",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 18,
        "endChar": 0
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41c90f46_a8ee46fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-18T11:37:09Z",
      "side": 1,
      "message": "Draft comments shouldn\u0027t be ignored anymore: but this should be addressed as a separate change.",
      "range": {
        "startLine": 19,
        "startChar": 51,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a25bac6_d4f25525",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 19,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-06-27T09:00:36Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "41c90f46_a8ee46fe",
      "range": {
        "startLine": 19,
        "startChar": 51,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7df89682_8abd5d44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-18T11:37:09Z",
      "side": 1,
      "message": "We do not need regex, they are slow and may impact also ignored refs because of the cost of evaluating them.\n\nIn Gerrit it is well down the massive degradation of performance whenever a ACL with regex is used. In my experience, a regex in the ACL can also cause production outages, when applied to repos with huge workload.",
      "range": {
        "startLine": 22,
        "startChar": 59,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16b3f8cc_68724e53",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-06-27T09:00:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7df89682_8abd5d44",
      "range": {
        "startLine": 22,
        "startChar": 59,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "deadf6de_ca705917",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-18T11:37:09Z",
      "side": 1,
      "message": "We should not encourage the use of regex, they would introduce a potentially considerable overhead.",
      "range": {
        "startLine": 29,
        "startChar": 16,
        "endLine": 29,
        "endChar": 39
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1b33383_7dc2cdde",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-06-27T09:00:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "deadf6de_ca705917",
      "range": {
        "startLine": 29,
        "startChar": 16,
        "endLine": 29,
        "endChar": 39
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d02d92a_18603572",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-18T11:37:09Z",
      "side": 1,
      "message": "Do we need all these complexity?\nWhat you want to achieve is to include everything *but* `refs/cache-automerge`?\n\n```\n[ref-database \"enforcementRules\"]\n  include \u003d *\n  exclude \u003d refs/cache-automerge/*\n```\n\nIf there is no `include` or `exclude`, then the current code and behaviour is preserved.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 63
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db1cd471_01060f8b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-18T11:52:39Z",
      "side": 1,
      "message": "Actually, we need to keep also the project scope.\n\nSo the example should be:\n\n```\n[ref-database \"enforcementRules\"]\n  include \u003d *:*\n  exclude \u003d *:refs/cache-automerge/*\n  exclude \u003d my-local-repo:*\n```\n\nThe above would include by default all refs from all projects, with the exception of:\n- `refs/change-automerge/*` of all repos\n- all the refs of `my-local-repo`\n\nDoes the above make sense?",
      "parentUuid": "5d02d92a_18603572",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 63
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a4d1588_f3fbbc1a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-06-27T09:00:36Z",
      "side": 1,
      "message": "re: complexity\n\nI discussed with Sasa originally and we came to that (top down rule ordering) choice to deal with rules which could be in conflict, or differ depending on what order they are read.",
      "parentUuid": "db1cd471_01060f8b",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 63
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f0dd581_7969dfd6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2024-06-27T09:44:48Z",
      "side": 1,
      "message": "IMHO, top-down rules evaluation brings clarity and simplicity: the first rule that matches (top-down) applies. Easy to understand and easy to follow. Taking your example, if we want to include everything but cache-automerge then the configuration would be:\n```\n[ref-database \"enforcementRules\"]\n  exclude \u003d refs/cache-automerge/*\n  include \u003d *\n```",
      "parentUuid": "9a4d1588_f3fbbc1a",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 63
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aacac302_3c2b1c74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2024-05-17T12:45:56Z",
      "side": 1,
      "message": "- rebased the change\n- fixed logging in SharedRefDbConfiguration\n- fixed some warnings",
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c55d8ed2_c9601ff4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-17T13:18:47Z",
      "side": 1,
      "message": "This is using regex, can you please get rid of regex?",
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7d0f5fc_dabd2f8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-17T13:30:15Z",
      "side": 1,
      "message": "Sorry, it was addressed already in the latest PS, please ignore.",
      "parentUuid": "c55d8ed2_c9601ff4",
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19e16e58_167bb94c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2024-05-17T13:40:58Z",
      "side": 1,
      "message": "- the default is unchanged\n- we will add support for wildcards in follow-up change",
      "parentUuid": "d7d0f5fc_dabd2f8b",
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6238c53_0834e0e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2024-05-17T14:00:38Z",
      "side": 1,
      "message": "we agreed discussing this with Luca to\n- replace regex rules by wildcard rules\n- multiple inclusion and exclusion rules evaluated top down\n- remove enforcement rules in another change, they were used only in global-refdb\u0027s infancy",
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3733c8d8_603968ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-18T11:37:09Z",
      "side": 1,
      "message": "As discussed during the hackathon, this change is *way too invasive* and introduce too much complexity.\n\nI am in favour of allowing you to store all refs (configurable) but also killing complexity.\n\nSee my comments, possibly this need to be achieved as intermediate steps, as suggested. Feel free to also organise a follow-up call if needed.",
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73d8b56f_b60279e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-06-05T17:05:41Z",
      "side": 1,
      "message": "Ping @wendy.wang10@sap.com are you planning to work on this?",
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a879b09_d14d2801",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-06-06T08:16:56Z",
      "side": 1,
      "message": "Hi, yes. Had some other work come up but I\u0027ve been able to work on this yesterday/today so should have a new patchset soon.",
      "parentUuid": "73d8b56f_b60279e7",
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8084c2c6_ad9d7a2f",
        "filename": "config.md",
        "patchSetId": 17
      },
      "lineNbr": 73,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-18T11:37:09Z",
      "side": 1,
      "message": "That is way too complex for what you want to achieve: we want to kill complexity not adding new one.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 73,
        "endChar": 0
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac158ca_e933065c",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/dfsrefdb/SharedRefEnforcement.java",
        "patchSetId": 17
      },
      "lineNbr": 81,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-17T13:15:34Z",
      "side": 1,
      "message": "This looks difficult to read and complex.\n\n\n\n```suggestion\n        return rule.ruleType.equals(StorageRule.StorageRuleType.EXCLUDE);\n```",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 21
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3545cca_3291cacf",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/dfsrefdb/SharedRefEnforcement.java",
        "patchSetId": 17
      },
      "lineNbr": 81,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-06-27T09:03:20Z",
      "side": 1,
      "message": "ack, no longer applicable due to latest changes removing this code",
      "parentUuid": "6ac158ca_e933065c",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 21
      },
      "revId": "38cbc5f9fe834a2fa2fca2ab4f1fae56ffb30692",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}