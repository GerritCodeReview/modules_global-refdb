{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f382036c_3a474c54",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-22T16:12:15Z",
      "side": 1,
      "message": "Overall, looks good üëç\n\nWould like to get others opinion on using the boolean flag for handling `Throwable` exceptions instead of a `catch` block.",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fe4ee33_99900829",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-22T16:12:15Z",
      "side": 1,
      "message": "nit: I\u0027m bit confused with this boolean flag. Wouldn\u0027t it be more readable to just catch `Throwable` and re-throw it if it\u0027s not an `Exception`? something like:\n```java\n} catch (Throwable e) {\n  boolean isException \u003d e instanceof Exception;\n  if (isException) {\n    // log goes here\n  }\n  // we do rollback here\n  if (!isException) {\n    throw e;\n  }\n}\n```",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35e16660_08367606",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-09-25T12:45:10Z",
      "side": 1,
      "message": "I agree your suggestion is tidier, but the underlying idea here was to never catch `Throwable`. If we come to an agreement that it\u0027s safe, then I suppose we could.",
      "parentUuid": "3fe4ee33_99900829",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7316eee1_af505920",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-26T11:44:26Z",
      "side": 1,
      "message": "\u003e but the underlying idea here was to never catch `Throwable`\n\nI\u0027ve heard that idea, but what you\u0027re actually doing here is _catching_ the `Throwable` in an indirect way. I do get it that it\u0027s not the best \"practice\" to catch it, but sometimes that\u0027s a valid use case, so why then work around it by adding a boolean flag that it checked in the `finally` block.",
      "parentUuid": "35e16660_08367606",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3842efb1_3616c064",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-09-26T14:52:41Z",
      "side": 1,
      "message": "@luca.milanesio@gmail.com WDYT?",
      "parentUuid": "7316eee1_af505920",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "196b96a0_f868efd9",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-10-04T11:01:48Z",
      "side": 1,
      "message": "I don\u0027t believe that in case when `Throwable` is thrown `rollback` will do anything useful as app will be dead anyway üòä IOW forget the flag, catch `Exception` and rollback if it happens - that would be my take üòÑ and `finally` would not be needed there.",
      "parentUuid": "3842efb1_3616c064",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df2b1f12_8026e9b2",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-04T11:39:11Z",
      "side": 1,
      "message": "Right, it will give us a false feeling of safety whereas it may be non-deterministic what\u0027ll happen. Better stick to the things we know that will work reliably.",
      "parentUuid": "196b96a0_f868efd9",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d0b682f_7f27281d",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-04T23:01:44Z",
      "side": 1,
      "message": "As a rule of thumb, `Throwable` should never ever be caught because it *could* be a type of error that it is just non recoverable at all.\n\nThere are exception though that are recoverable but, because of the underlying implementation, are modelled as Runtime exceptions even if they are not (e.g. AWS does that).\n\nThe purpose of the fix is making sure that we *at least* attempt to rollback.",
      "parentUuid": "df2b1f12_8026e9b2",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}