{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f382036c_3a474c54",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-22T16:12:15Z",
      "side": 1,
      "message": "Overall, looks good üëç\n\nWould like to get others opinion on using the boolean flag for handling `Throwable` exceptions instead of a `catch` block.",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fe4ee33_99900829",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-22T16:12:15Z",
      "side": 1,
      "message": "nit: I\u0027m bit confused with this boolean flag. Wouldn\u0027t it be more readable to just catch `Throwable` and re-throw it if it\u0027s not an `Exception`? something like:\n```java\n} catch (Throwable e) {\n  boolean isException \u003d e instanceof Exception;\n  if (isException) {\n    // log goes here\n  }\n  // we do rollback here\n  if (!isException) {\n    throw e;\n  }\n}\n```",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35e16660_08367606",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-09-25T12:45:10Z",
      "side": 1,
      "message": "I agree your suggestion is tidier, but the underlying idea here was to never catch `Throwable`. If we come to an agreement that it\u0027s safe, then I suppose we could.",
      "parentUuid": "3fe4ee33_99900829",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7316eee1_af505920",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-26T11:44:26Z",
      "side": 1,
      "message": "\u003e but the underlying idea here was to never catch `Throwable`\n\nI\u0027ve heard that idea, but what you\u0027re actually doing here is _catching_ the `Throwable` in an indirect way. I do get it that it\u0027s not the best \"practice\" to catch it, but sometimes that\u0027s a valid use case, so why then work around it by adding a boolean flag that it checked in the `finally` block.",
      "parentUuid": "35e16660_08367606",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3842efb1_3616c064",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-09-26T14:52:41Z",
      "side": 1,
      "message": "@luca.milanesio@gmail.com WDYT?",
      "parentUuid": "7316eee1_af505920",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "196b96a0_f868efd9",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-10-04T11:01:48Z",
      "side": 1,
      "message": "I don\u0027t believe that in case when `Throwable` is thrown `rollback` will do anything useful as app will be dead anyway üòä IOW forget the flag, catch `Exception` and rollback if it happens - that would be my take üòÑ and `finally` would not be needed there.",
      "parentUuid": "3842efb1_3616c064",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df2b1f12_8026e9b2",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-04T11:39:11Z",
      "side": 1,
      "message": "Right, it will give us a false feeling of safety whereas it may be non-deterministic what\u0027ll happen. Better stick to the things we know that will work reliably.",
      "parentUuid": "196b96a0_f868efd9",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d0b682f_7f27281d",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-04T23:01:44Z",
      "side": 1,
      "message": "As a rule of thumb, `Throwable` should never ever be caught because it *could* be a type of error that it is just non recoverable at all.\n\nThere are exception though that are recoverable but, because of the underlying implementation, are modelled as Runtime exceptions even if they are not (e.g. AWS does that).\n\nThe purpose of the fix is making sure that we *at least* attempt to rollback.",
      "parentUuid": "df2b1f12_8026e9b2",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b876b5dd_2530507f",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-05T09:26:12Z",
      "side": 1,
      "message": "\u003e As a rule of thumb, Throwable should never ever be caught because it could be a type of error that it is just non recoverable at all.\n\nI think that having this coded as `catch (Throwable e)` in this case is more readable and convey the intent better than usage of a ``boolean` flag and `finally` block.\n\n\u003e The purpose of the fix is making sure that we at least attempt to rollback.\n\nI\u0027d still argue that catching `Throwable` is better approach. In any case would be good to document that _intent_ of \"at least attempting to rollback\", so that in teh future we won\u0027t scream _WTF_ when we look at this code.",
      "parentUuid": "0d0b682f_7f27281d",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50e9f83b_def82d76",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-10-09T14:10:29Z",
      "side": 1,
      "message": "We did a little digging, and it looks like there is precedent for catching `Throwable` in Gerrit (no links, but easy to look for). As Luca points out, as a rule of thumb we should not catch `Error`s, but if we rethrow we should be safe (relatively speaking), so we either crash before we\u0027ve rethrown, in which case it doesn\u0027 matter anyway, or we rethrow the exception. Either way we don\u0027t catch/return `Error`s, which is dangerous.\n\nGerrit also makes use of Guava\u0027s `throwIfUnchecked` [1] which we could look at using here (and in the respective change for `RefUpdateValidator` [2]).\n\nRemoving the boolean flag does make the code easier to read, so we\u0027ll follow that approach.\n\n[1] https://guava.dev/releases/23.0/api/docs/com/google/common/base/Throwables.html#throwIfUnchecked-java.lang.Throwable-\n[2] https://gerrit-review.googlesource.com/c/modules/global-refdb/+/386058/17",
      "parentUuid": "b876b5dd_2530507f",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35a4a17e_6115912f",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 9
      },
      "lineNbr": 160,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-12T21:50:52Z",
      "side": 1,
      "message": "I\u0027ve found the place you\u0027ve mentioned in Gerrit code:\n```\n      } catch (Throwable e) {\n        logger.atSevere().withCause(e).log(\n            \"%s\",\n            MessageFormat.format(\n                HttpServerText.get().internalErrorDuringUploadPack,\n                ServletUtils.getRepository(req)));\n        if (!rsp.isCommitted()) {\n          rsp.reset();\n          String msg \u003d e instanceof PackProtocolException ? e.getMessage() : null;\n          sendError(req, rsp, UploadPackErrorHandler.statusCodeForThrowable(e), msg);\n        }\n      }`\n```\n\nThat is a serious mistake IMHO: we are catching Throwable (which is NOT supposed to be caught) and we are not even re-throwing it in case it is a non-recoverable error, like a stack overview or out of memory.\n\nThe argument I hear is that _catching throwable is more readable_? That doesn\u0027t look a strong enough argument to me.\n\nMarking this as resolved, unless you\u0027d like to have more organic conversation on a short call.",
      "parentUuid": "50e9f83b_def82d76",
      "revId": "c13e9107b739b746aeec860094ff1991d1fb0a05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}