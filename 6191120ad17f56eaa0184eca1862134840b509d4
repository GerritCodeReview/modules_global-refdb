{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f4e4277c_78ad24fa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 42
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-09T10:02:16Z",
      "side": 1,
      "message": "This should be on a per-project basis though: some of the projects may be tracked on the global-refdb and other not tracked.\n\nBear in mind that the global-refdb is also used in multi-site, where not all projects are replicated across all sites.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 22
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce64ab8c_9755d649",
        "filename": "/COMMIT_MSG",
        "patchSetId": 42
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-09T10:02:16Z",
      "side": 1,
      "message": "üëç",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 14,
        "endChar": 24
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a0717ae_91f9a846",
        "filename": "/COMMIT_MSG",
        "patchSetId": 42
      },
      "lineNbr": 17,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-09T10:02:16Z",
      "side": 1,
      "message": "As we typically do, we should deprecated the legacy policies in v3.11 and remove them in the next release v3.12.",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6ad38e3_d2b1c1ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 42
      },
      "lineNbr": 17,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2024-07-09T11:26:41Z",
      "side": 1,
      "message": "What is the advantage of postponing this removal of unnecessary complexity to one release later ? \n\nIIRC you said this complexity isn\u0027t needed and nobody should be using it. So why not ship this unconditionally with 3.11 ?\nLooking at release notes it seems we have breaking changes in every release.\n\nAFAICS this requires at most a configuration change.\nOr do I miss something ?",
      "parentUuid": "2a0717ae_91f9a846",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9f55c3e_1891385f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 42
      },
      "lineNbr": 17,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-09T22:07:06Z",
      "side": 1,
      "message": "\u003e What is the advantage of postponing this removal of unnecessary complexity to one release later ? \n\nWe typically keep compatibility between a release R and its successor R+1 for two reasons:\n- Apply Gerrit compatibility policy to this module as well\n- Allowing smooth rolling upgrades (on multi-site we typically keep two versions active at the same time)\n\n\u003e IIRC you said this complexity isn\u0027t needed and nobody should be using it.\n\nCorrect, but I\u0027m not 100% sure that nobody has ever used it.\n\n\u003e So why not ship this unconditionally with 3.11 ?\n\nWe could, of course, but I believe having a _emergency legacy mode_ won\u0027t hurt. We could just keep the legacy class with deprecation annotations, similar to what I did for the replication plugin at .https://gerrit-review.googlesource.com/c/plugins/replication/+/429897/14/src/main/java/com/googlesource/gerrit/plugins/replication/LegacyCredentialsFactory.java.\n\n\u003e Looking at release notes it seems we have breaking changes in every release.\n\nI believe we made mistakes, that doesn\u0027t mean they must become the norm, hopefully they won\u0027t.\n\n\u003e AFAICS this requires at most a configuration change.\n\u003e Or do I miss something ?\n\nYes, requires a configuration change and we won\u0027t support anymore generic refs exclusion.",
      "parentUuid": "c6ad38e3_d2b1c1ce",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf37d69f_b740c0e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 42
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-09T10:02:16Z",
      "side": 1,
      "message": "Thanks for the initiative, I\u0027m all for killing complexity.",
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b407e44_7a600ecd",
        "filename": "config.md",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-09T10:02:16Z",
      "side": 1,
      "message": "This should be on a per-project basis.\n\nExample:\n\n```\n[ref-database \"storeAllRefs\"]\n   projects \u003d foo\n   projects \u003d bar\n```\n\nOr any variation of the above would also work.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3f10744_e4c482c4",
        "filename": "config.md",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2024-07-09T11:26:41Z",
      "side": 1,
      "message": "So `project.pattern` should be handled in the same way it was before this change ?",
      "parentUuid": "2b407e44_7a600ecd",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e06c51_3ed2dd28",
        "filename": "config.md",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-09T22:07:06Z",
      "side": 1,
      "message": "\u003e So `project.pattern` should be handled in the same way it was before this change ?\n\nI don\u0027t believe we want to manage all the different flavours as it was before.\nWhat I know we have preserve is the ability (used by multi-site) to have _global projects_ (tracked on the global-refdb) and _local projects_ (not tracked on the global-refdb). That means we would also need to have a similar _\"storeNoRefs\"_ with a set of projects defined.\n\nHaving a set of projects would allow a fast lookup rather than listing and matching with a regex.",
      "parentUuid": "f3f10744_e4c482c4",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a880b215_f4917512",
        "filename": "config.md",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-07-11T09:27:02Z",
      "side": 1,
      "message": "We track global projects and local projects here: https://gerrit.googlesource.com/modules/global-refdb/+/refs/heads/master/src/main/java/com/gerritforge/gerrit/globalrefdb/validation/ProjectsFilter.java#74, that isn\u0027t something I was going to touch with this change.\n\nThe two locations in the code where this is used check if the project was (not) global, and if the project policy is to ignore refs from it. If either of those conditions are met, it does not update the global-refdb. I think that if we keep the current behavior of `project.pattern` to handle the global/local project lists, we don\u0027t need the \"*storeNoRefs*\", as that would be redundant given the `isGlobalProject` check (and we can remove the `getPolicy(projectName)` checks altogether). \n\nhttps://gerrit.googlesource.com/modules/global-refdb/+/refs/heads/master/src/main/java/com/gerritforge/gerrit/globalrefdb/validation/RefUpdateValidator.java#151\n\nhttps://gerrit.googlesource.com/modules/global-refdb/+/refs/heads/master/src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java#115\n\nI also think being global/local is a different condition from wanting to store immutable refs or not. The former supersedes the latter. This option is really actually *storeImmutableRefsAlso* (though that is not a great name, maybe just *storeImmutableRefs* suffices?). We would filter global projects out before checking whether immutable refs should be stored \u0027too\u0027. So, do we still need per-project discrimination?",
      "parentUuid": "67e06c51_3ed2dd28",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24ecf99f_e0851465",
        "filename": "config.md",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-07-11T09:28:26Z",
      "side": 1,
      "message": "addendum: do we still need per-project discrimination *in this option, as it already exists in project.pattern*? is what I meant to ask.",
      "parentUuid": "a880b215_f4917512",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46e4b14d_ee72fc2a",
        "filename": "config.md",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2024-07-11T11:59:48Z",
      "side": 1,
      "message": "I think we now agree on what we want to achieve, namely: we can define on project basis whether no-refs, default-refs or all-refs are stored. The default-refs is what is currently defined as default in the source code.\n\nIIUC Luca\u0027s last proposal, we could get rid of the `[project]` section completely by introducing a \"storeNoRefs\" project list. I like that idea but I must add that we most likely cannot avoid resolving conflicting configurations e.g. where a project is both in storeAllRefs and storeNoRefs list.\n\nTo bring this discussion forward I would post here a couple of example scenarios and how we could achieve them with the proposed configuration style(s). I believe that this will make the discussion easier.\n\nExample 1:\nproject A - no refs stored\nproject B - default refs stored\nproject C - all refs stored\n\npossible configuration style:\n```\n[ref-database \"storeNoRefs\"]\n  project \u003d A\n[ref-database \"storeAllRefs\"]\n  project \u003d C\n```\n\n\nExample 2:\nStore all refs for all projects\n```\n[ref-database \"storeAllRefs\"]\n  project \u003d *\n```\n\nExample 3: \nStore all refs for all projects except for projects X and Y were we store no refs\n```\n[ref-database \"storeAllRefs\"]\n  project \u003d *\n[ref-database \"storeNoRefs\"]\n  project \u003d X\n  project \u003d Y\n```\n\nAn important aspect of this example is that `X` and `Y` are matched for both subsections. Basically we have a conflicting configuration which should be resolved so that no refs are stored for the `X` and `Y` projects. Maybe we can say that we always first process `storeNoRefs` and then `storeAllRefs` and the first match wins?\n\nExample 5:\nStore no refs for all projects except for projects X and Y were we store all refs.\nThis example is opposite of the example 4 and it shows that the policy of first processing `storeNoRefs` and then `storeAllRefs` doesn\u0027t universally work:\n\n```\n[ref-database \"storeNoRefs\"]\n  project \u003d *\n[ref-database \"storeAllRefs\"]\n  project \u003d X\n  project \u003d Y\n```\n\nWe could say that we process the configuration (sub)sections in the top-down order and that the first matching rule wins. I don\u0027t know if JGit provides the feature of processing all (subsections) in the order they are given in the config file?\n\nPlease comment on the proposed config styles and propose new config styles and/or new examples.",
      "parentUuid": "24ecf99f_e0851465",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae8bdda3_4ce64fe7",
        "filename": "config.md",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-11T21:41:00Z",
      "side": 1,
      "message": "IMHO your Examples 1. 2. and 3. make sense to me.\nWhen using HA or Multi-Site, storing and checking refs on the global-refdb for all projects should be the _normal_ scenario, whilst having some exclusions is the *exception*.\n\nWhen you want to store all refs (including the immutable one), then you add the section as in your Example 2.\n\n```\n[ref-database \"storeAllRefs\"]\n  project \u003d *\n```\n\nThe Example 5. isn\u0027t a valid one IMHO, unless you need it and therefore I would be happy to understand the use-case before judging it.\n\n**Bottom line**: if we consider the _\"storeNoRefs\"_ first (if any project name matches) and then the _\"storeAllRefs\"_ next should be always the correct thing to do.",
      "parentUuid": "46e4b14d_ee72fc2a",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e27e8475_f000ff50",
        "filename": "config.md",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2024-07-12T08:50:59Z",
      "side": 1,
      "message": "I agree that some examples are a bit artificial. Their only purpose was to show that we need a policy how to automatically resolve conflicting configurations, because conflicting configurations are possible.\nI think I am find with the proposed bottom line from Luca.",
      "parentUuid": "ae8bdda3_4ce64fe7",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ce75b22_fc84ddd2",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/SharedRefDbConfiguration.java",
        "patchSetId": 42
      },
      "lineNbr": 0,
      "author": {
        "id": 1022687
      },
      "writtenOn": "2024-07-09T09:45:03Z",
      "side": 1,
      "message": "Needs reformatting with GJF",
      "tag": "autogenerated:jenkins",
      "revId": "6191120ad17f56eaa0184eca1862134840b509d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}