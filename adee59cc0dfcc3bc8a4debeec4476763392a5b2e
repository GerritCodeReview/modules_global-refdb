{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "85655ec4_17babbf5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 12,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T14:47:33Z",
      "side": 1,
      "message": "You should also specify that is the limited wildcard matching logic that is available in JGit, that means it can be used between refs fragments",
      "range": {
        "startLine": 12,
        "startChar": 13,
        "endLine": 12,
        "endChar": 30
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e587b227_f658aa41",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T14:47:33Z",
      "side": 1,
      "message": "I would simply rephrase as: _\"This changes allows to override the default hardcoded rules\"_",
      "range": {
        "startLine": 13,
        "startChar": 39,
        "endLine": 14,
        "endChar": 36
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbc97382_d92763a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T14:47:33Z",
      "side": 1,
      "message": "All keys under this section are `rule` therefore their meaning isn\u0027t used. I would simply do:\n```\ninclude \u003d *:*\nexclude \u003d *:refs/draft/comments/*\n```",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 62
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a100e3b_bf764ac9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 19,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-07-02T09:30:25Z",
      "side": 1,
      "message": "As far as I could tell, jgit\u0027s API for reading config files doesn\u0027t expose the ability to read all items for all keys in order. My original plan was your suggested syntax as well, but the only way to acquire those values seems to be getting all \u0027include\u0027 and \u0027exclude\u0027 items in two separate groups -- which would ruin the top-down rules evaluation as it doesn\u0027t maintain ordering (which could be problematic if people interleave the rules). I agree this syntax of `rule \u003d INCLUDE:` is not pleasant but I don\u0027t have an alternative idea that preserves the rule ordering capability, do you know of some way?",
      "parentUuid": "fbc97382_d92763a3",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 62
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f33c271e_460de007",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-02T11:26:08Z",
      "side": 1,
      "message": "I found misleading to have these rules produce different results based on the order of having the `include` and `exclude` rule.\n\nFor instance, by having the ordering logic between include and exclude, the one below would not exclude anything.\n```\nrule \u003d include:*:refs/*\nrule \u003d exclude:*:refs/tags/*\n```\n\nHowever, by flipping them you would exclude the tags.\n```\nrule \u003d exclude:*:refs/tags/*\nrule \u003d include:*:refs/*\n```\n\nI thought you wanted to simply include all refs, excluding the ones starting with a prefix. Why not just implementing that? Or do you have more complex use-cases that must be implemented with a generic rule-based system that is sensitive to the ordering?",
      "parentUuid": "2a100e3b_bf764ac9",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 62
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da47911f_70a2096c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 19,
      "author": {
        "id": 1144862
      },
      "writtenOn": "2024-07-03T09:06:31Z",
      "side": 1,
      "message": "Yes, the conflict exists regardless of ordering though. \n\nThere could always be rules where more than one rule matches the same ref. If the matching rules contradict, like with your given example, how do we otherwise resolve it? Our proposal is to resolve it top-down. If we do not do that, how else can we resolve conflicting rules?",
      "parentUuid": "f33c271e_460de007",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 62
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf5f1d96_4d2df6bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-03T10:16:56Z",
      "side": 1,
      "message": "\u003e Yes, the conflict exists regardless of ordering though. \n\u003e \n\u003e There could always be rules where more than one rule matches the same ref. If the matching rules contradict, like with your given example, how do we otherwise resolve it? Our proposal is to resolve it top-down. If we do not do that, how else can we resolve conflicting rules?\n\nFocusing on your use-case, what are the rules you are planning to use?\nI\u0027d like to focus on what you guys need and what\u0027s the easiest and most compatible way to achieve it.",
      "parentUuid": "da47911f_70a2096c",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 62
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52e63578_3e426c85",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 19,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2024-07-03T10:44:17Z",
      "side": 1,
      "message": "Looks like we are discussing it we need support for include/exclude rules at all?\n\nWe would most likely include all refs.\n\n1. If the default would be changed to include everything then we would probably run without any custom include/exclude rules.\n\n2. If the default of excluding some refs stays, then we need at least one include rule to include all refs. We could live without exclude rule type in this case.\n\n3. If we are going to support both include and exclude rules then we must define how conflicting rules are resolved. We proposed top-down strategy as it is, in our opinion, simple to understand and implement.",
      "parentUuid": "cf5f1d96_4d2df6bc",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 62
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48524c50_970c1e9b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-03T11:41:37Z",
      "side": 1,
      "message": "\u003e Looks like we are discussing it we need support for include/exclude rules at all?\n\u003e \n\u003e We would most likely include all refs.\n\n+1\n\n\u003e 1. If the default would be changed to include everything then we would probably run without any custom include/exclude rules.\n\n+1, can we define a feature-switch for that, without the need to amend anything of the existing code? The default should stay the current one IMHO, as your use-case is very specific for the need to having a \"backup\" of the refs _just-in-case_.\n\nWe would just keep the current behaviour.\n\n\u003e 2. If the default of excluding some refs stays, then we need at least one include rule to include all refs. We could live without exclude rule type in this case.\n\nCorrect, a simple feature switch would do.\n\n\u003e 3. If we are going to support both include and exclude rules then we must define how conflicting rules are resolved. We proposed top-down strategy as it is, in our opinion, simple to understand and implement.\n\nAs you won\u0027t need it and we can just live with the current logic, I would not introduce code and complexity for something we do not need at the moment.",
      "parentUuid": "52e63578_3e426c85",
      "range": {
        "startLine": 19,
        "startChar": 44,
        "endLine": 19,
        "endChar": 62
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bab7f5b_546ea519",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T21:38:40Z",
      "side": 1,
      "message": "Here is my overall reasons for a -1:\n- The change contains a mix of *valid* cleanups and refactoring, but they should be decoupled from features (done as I2eceefd, I2551dc4 and I60157ac)\n- Previously the custom rules were indexed by project but now they are evaluated sequentially, with a potential risk in terms of runtime performance\n- There are some code-style issues and unused variables, more clean-up is needed\n- This represents a breaking change: can be deprecate the old format and use the new one by injection? We can then in v3.12 remove the deprecated format. We typically deprecate first and then remove",
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40862ae2_5e30180b",
        "filename": "config.md",
        "patchSetId": 32
      },
      "lineNbr": 27,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T21:11:17Z",
      "side": 1,
      "message": "Looking at the code, the custom rules are applied *on top* of the default behaviour and, if matches, take precedence.\n\nIf you define custom rules but they do not match, the default behaviour is preserved.",
      "range": {
        "startLine": 27,
        "startChar": 24,
        "endLine": 27,
        "endChar": 57
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c18639a5_137d5abf",
        "filename": "config.md",
        "patchSetId": 32
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T14:47:33Z",
      "side": 1,
      "message": "```suggestion\n      include \u003d *:*\n```",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 24
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4882142_019c2cc3",
        "filename": "config.md",
        "patchSetId": 32
      },
      "lineNbr": 38,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T14:47:33Z",
      "side": 1,
      "message": "```suggestion\n      exclude \u003d my-repo:refs/draft-comments/*\n```",
      "range": {
        "startLine": 38,
        "startChar": 7,
        "endLine": 38,
        "endChar": 50
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb03f89b_56c0342c",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/BatchRefUpdateValidator.java",
        "patchSetId": 32
      },
      "lineNbr": 21,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T20:50:03Z",
      "side": 1,
      "message": "This import is unused.",
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28da6f6e_b1dad98f",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/RefUpdateValidator.java",
        "patchSetId": 32
      },
      "lineNbr": 24,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T20:51:33Z",
      "side": 1,
      "message": "This import is unused.",
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eccb4ae1_38e4c5ee",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/SharedRefDbConfiguration.java",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1022687
      },
      "writtenOn": "2024-06-28T15:26:54Z",
      "side": 1,
      "message": "Needs reformatting with GJF",
      "tag": "autogenerated:jenkins",
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a484661_f9ec68a8",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/dfsrefdb/CustomSharedRefEnforcementByProject.java",
        "patchSetId": 32
      },
      "lineNbr": 58,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T21:17:37Z",
      "side": 1,
      "message": "Previously this was a map indexed by project, which means that if you have 10k projects and rules for 5k of them, the other 5k project would have not been affected from a performance standpoint.\n\nNow, one project that isn\u0027t impacted by the rules is *still* going to through the look of all rules, to find out that none of them are matching.\n\nCan we preserve the multi-map by project? Is there any value in making it a flat list?\n\nP.S. We have over 50k projects on GerritHub.io, so avoiding a loop would help us.",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 58,
        "endChar": 5
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8329c76a_63b4b77b",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/dfsrefdb/CustomSharedRefEnforcementByProject.java",
        "patchSetId": 32
      },
      "lineNbr": 60,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T20:39:38Z",
      "side": 1,
      "message": "This full qualifier isn\u0027t needed because this class extends `SharedRefEnforcement`",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 60,
        "endChar": 30
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d6ecbba_919bdd7a",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/dfsrefdb/CustomSharedRefEnforcementByProject.java",
        "patchSetId": 32
      },
      "lineNbr": 61,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T20:39:38Z",
      "side": 1,
      "message": "This full qualifier isn\u0027t needed because this class extends `SharedRefEnforcement`",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 61,
        "endChar": 26
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc2a424c_3b7c3721",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/dfsrefdb/CustomSharedRefEnforcementByProject.java",
        "patchSetId": 32
      },
      "lineNbr": 73,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T20:39:38Z",
      "side": 1,
      "message": "This full qualifier isn\u0027t needed because this class extends `SharedRefEnforcement`",
      "range": {
        "startLine": 73,
        "startChar": 9,
        "endLine": 73,
        "endChar": 29
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da2e763a_3b8db5eb",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/dfsrefdb/CustomSharedRefEnforcementByProject.java",
        "patchSetId": 32
      },
      "lineNbr": 79,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T20:39:38Z",
      "side": 1,
      "message": "This full qualifier isn\u0027t needed because this class extends `SharedRefEnforcement`",
      "range": {
        "startLine": 79,
        "startChar": 11,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa07ece9_8ec4026f",
        "filename": "src/main/java/com/gerritforge/gerrit/globalrefdb/validation/dfsrefdb/DefaultSharedRefEnforcement.java",
        "patchSetId": 32
      },
      "lineNbr": 36,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-07-01T21:19:01Z",
      "side": 1,
      "message": "The `config` field is unused: why do we need to inject and store it?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 36,
        "endChar": 3
      },
      "revId": "adee59cc0dfcc3bc8a4debeec4476763392a5b2e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}